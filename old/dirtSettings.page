Menu="Utilities"
Title="Deduplication in Real-Time"
Icon="fa-search-minus"
---
<?
$docroot ??= ($_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp');
require_once "$docroot/plugins/dynamix.vm.manager/include/libvirt_helpers.php";
//require_once "$docroot/plugins/dynamix/ShareEdit.page";

switch ($display['theme']) {
    case 'gray' :
        $bgcolor = '#121510';
        $border = '#606e7f';
        $top = -44;
        break;
    case 'azure':
        $bgcolor = '#edeaef';
        $border = '#606e7f';
        $top = -44;
        break;
    case 'black':
        $bgcolor = '#212121';
        $border = '#2b2b2b';
        $top = -58;
        break;
    default     :
        $bgcolor = '#ededed';
        $border = '#e3e3e3';
        $top = -58;
        break;
}


function loadConfig()
{
    $jsonData = file_get_contents("./plugins/bobbintb.system.dirt/bobbintb.system.dirt.json");
    return json_decode($jsonData, true);
}

$configArray = loadConfig();
?>

<link type="text/css" rel="stylesheet" href="<? autov('/webGui/styles/jquery.filetree.css') ?>">
<link type="text/css" rel="stylesheet" href="<? autov('/plugins/dynamix.vm.manager/sheets/UpdateVM.css') ?>">
<style>
    .fileTree {
        background: <?= $bgcolor ?>;
        width: 300px;
        max-height: 150px;
        overflow-y: scroll;
        overflow-x: hidden;
        position: relative;
        z-index: 100;
        display: none
    }

    #vmform table tr td:nth-child(odd) {
        width: 150px;
        text-align: right
    }

    #sb-wrapper {
        width: 500px !important;
        position: fixed !important;
        top: 50% !important;
        left: 50% !important;
        transform: translate(-50%, -50%) !important;
    }

    #sb-wrapper-inner {
        height: 400px !important
    }
</style>
<div class="domain">
    <form id="vmform" method="POST">
        <div id="form_content">
            <dl>
                <div class="formview">
                    <?
                    foreach ($configArray['include'] as $i => $arrShare) {
                        $strLabel = ($i > 0) ? appendOrdinalSuffix($i + 1) : '';
                        ?>
                        <table data-category="Monitor" data-multiple="true" data-minimum="1" data-index="<?= $i ?>"
                               data-prefix="<?= $strLabel ?>">
                            <tr>
                                <td>
                                    <text id="monitor[<?= $i ?>]"> _(Monitor Path)_:</text>
                                </td>
                                <td>
                                    <input type="text" id="monitor[<?= $i ?>]" name="monitor[<?= $i ?>]"
                                           autocomplete="off" data-pickfolders="true" data-pickfilter="NO_FILES_FILTER"
                                           data-pickroot="/mnt/" value="<?= htmlspecialchars(
                                        $arrShare
                                    ) ?>" placeholder="_(e.g.)_ /mnt/user/..." title="_(path to monitor)_"/>
                                </td>
                            </tr>
                        </table>
                    <? } ?>
                    <script type="text/html" id="tmplMonitor">
                        <table>
                            <tr>
                                <td>_(Monitor Path)_:</td>
                                <td>
                                    <input type="text" name="monitor[{{INDEX}}]" id="monitor[{{INDEX}}]"
                                           autocomplete="off" spellcheck="false" data-pickfolders="true"
                                           data-pickfilter="NO_FILES_FILTER" data-pickroot="/mnt/" value=""
                                           placeholder="_(e.g.)_ /mnt/user/..." title="_(path to monitor)_"/>
                                </td>
                            </tr>
                        </table>
                    </script>
                    <input type="hidden" name="updatevm" value="1"/>
                    <button type="submit" id="save-button" disabled="true">Save</button>
                </div>
            </dl>
        </div>
    </form>
</div>

<script src="<? autov('/webGui/javascript/jquery.filedrop.js') ?>"></script>
<script src="<? autov('/webGui/javascript/jquery.filetree.js') ?>" charset="utf-8"></script>
<script src="<? autov('/plugins/dynamix.vm.manager/javascript/dynamix.vm.manager.js') ?>"></script>
<script type="text/javascript">
    $("#vmform .formview #save-button").click(function frmSubmit() {
        const monitorInputs = document.querySelectorAll('input[name^="monitor["]');
        const monitorPaths = Array.from(monitorInputs).map(input => input.value);
        const oldPaths = JSON.parse('<?php echo json_encode($configArray['include']); ?>');
        const removedPaths = oldPaths.filter(path => !monitorPaths.includes(path));
        const addedPaths = monitorPaths.filter(path => !oldPaths.includes(path));


        $.post('/plugins/bobbintb.system.dirt/php/config.php', JSON.stringify({include: monitorPaths}), function (data) {
            console.log('Server response:', data);
        }, 'json')
            .fail(function (jqXHR, textStatus, errorThrown) {
                console.error('Error:', textStatus, errorThrown);
            });
    });

    function isVMAdvancedMode() {
        return true;
    }

    $(function () {
        $("#vmform table[data-category]").each(function () {
            var category = $(this).data('category');
            updatePrefixLabels(category);
            bindSectionEvents(category);
        });

        $("#vmform input[data-pickroot]").fileTreeAttach();
        var $el = $('#form_content');
        $('#form_content').fadeIn('fast');
    });
</script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<div>
    <script>
        function scan() {
            fetch(`<?php echo "http://" . $_SERVER["SERVER_ADDR"] . ":3000"; ?>/scan`)
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        function test() {
            fetch(`<?php echo "http://" . $_SERVER["SERVER_ADDR"] . ":3000"; ?>/test`)
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        function hash() {
            fetch(`<?php echo "http://" . $_SERVER["SERVER_ADDR"] . ":3000"; ?>/hash`)
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        document.addEventListener('DOMContentLoaded', function () {
            const saveButton = document.getElementById('save-button');
            const form = document.getElementById('vmform');

            function attachInputListeners() {
                const formInputs = document.querySelectorAll('#vmform input');
                formInputs.forEach(input => {
                    input.addEventListener('input', function () {
                        saveButton.disabled = false;
                    });
                });
            }

            attachInputListeners();
            const observer = new MutationObserver(function (mutationsList) {
                for (let mutation of mutationsList) {
                    if (mutation.type === 'childList') {
                        attachInputListeners();
                        const addedNodes = Array.from(mutation.addedNodes);
                        const removedNodes = Array.from(mutation.removedNodes);
                        if (addedNodes.some(node => node.tagName === 'TABLE') || removedNodes.some(node => node.tagName === 'TABLE')) {
                            saveButton.disabled = false;
                        }
                    }
                }
            });
            observer.observe(form, {childList: true, subtree: true});
        });
    </script>
    <dl>

        <button id="delete-db" onclick="deleteDB()">Delete database</button>
        <div class="title">
      <span class="left">
        <i class="fa fa-search icon"></i>_(Scan)_</span>
        </div>

        <form name="share_edit" method="POST" action="/update.htm" target="progressFrame" onsubmit="return prepareEdit()"<?=$name?:">"?>
        <div class="shade-<?=$display['theme']?>">
            _(Included disk(s))_:
            : <select id="s1" name="shareInclude1" multiple>
                <?foreach ($shares as $list):?>
                    <?=mk_option("", $list['name'], compress($list['name']))?>
                <?endforeach;?>
            </select>

            :share_edit_included_disks_help:

            _(Excluded disk(s))_:
            : <select id="s2" name="shareExclude1" multiple>
                <?foreach ($shares as $list):?>
                    <?=mk_option("", $list['name'], compress($list['name']))?>
                <?endforeach;?>
            </select>

            :share_edit_excluded_disks_help:
        </div>

        &nbsp;
        : <input type="button" value="_(Done)_" onclick="done()">
        </form>

        <div style='height:10px; width:600px;' id='ttydContainer'>Scan not running.</div>
        <br>
        <button id="scan-button" onclick="scan()">Begin scan</button>
        <button id="test-button" onclick="test()">Test</button>
        <button id="hash-button" onclick="hash()">Hash</button>
    </dl>
    <dl>
        <font size='2'><span id='daemonStatus'>Daemon status: </span>
        </font>
        <!--
        <div style="border: 1px solid white; height: 300px; width: 25vw; overflow: auto; white-space: pre-wrap;" id="daemonLines"></div>
        -->
        <br>
        <button id="daemon" onclick="daemon()"></button>
    </dl>
</div>

<script>
    function initializeDropdown(selector, emptyText, width, firstItemChecksAll = false) {
        try {
            $(selector).dropdownchecklist({
                emptyText: emptyText,
                width: width,
                explicitClose: "..._(close)_",
                firstItemChecksAll: firstItemChecksAll
            });
        } catch (e) {
            console.error(`Error initializing ${selector}: ` + e.message);
        }
    }

    function destroyDropdownIfExists(selector) {
        try {
            $(selector).dropdownchecklist('destroy');
        } catch (e) {
            if (e.message.includes('prior to initialization')) {
                console.log(`${selector} not initialized, skipping destroy.`);
            } else {
                console.error(`Error destroying ${selector}: ` + e.message);
            }
        }
    }

    function readShare() {
        var name, data, disk, include, exclude, i, j;
        name = $('select[name="readshare"]').val();
        initDropdown(true);
    }

    function checkName(name) {
        let isValidName;
        isValidName = /^[A-Za-z0-9-_.: ]*$/.test(name);
        if (isValidName) {
            $('#zfs-name').hide();
        } else {
            $('#zfs-name').show();
        }
    }

    $(function() {
        initializeDropdown('#s1', "_(Select shares to monitor...)_", <?=$width[1]?>);
        initializeDropdown('#s2', "_(None)_", <?=$width[1]?>);
        checkName($('#shareName').val());
    });
</script>